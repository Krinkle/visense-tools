#!/usr/bin/env node

'use strict';

const version = require('../package.json').version;

var program        = require('commander'),
    Authentication = require('../lib/authentication.js');


// Define command-line arguments
program
  .version(version)
  .option('--ip <ip>', 'IP-address')
  .option('--port <port>', 'Port number', '80')
  .option('--command <signIn|signOut>', 'Authentication command to be executed.')
  .option('--username <username>', 'Username (mandatory for command signIn)')
  .option('--password <password>', 'Password (mandatory for command signIn)')
  .option('--sessionToken <sessionToken>', 'Session token (mandatory for command signOut)')
  .parse(process.argv);


// Check command-line arguments
function checkCommandLineArguments(program)
{
  if (  (typeof program.ip === 'undefined')
     || (typeof program.port === 'undefined')
     || (typeof program.command === 'undefined'))
  {
    throw new Error('Missing command-line arguments.');
  }

  if (!/^(signIn|signOut)$/.test(program.command))
  {
    throw new Error('Invalid command provided.');
  }

  if (  (program.command === 'signIn')
     && (  (typeof program.username === 'undefined')
        || (typeof program.password === 'undefined')))
  {
    throw new Error('Command-line arguments \'username\' and \'password\' mandatory for command signIn.');
  }

  if (  (program.command === 'signOut')
     && (typeof program.sessionToken === 'undefined'))
  {
    throw new Error('Command-line argument \'sessionToken\' mandatory for command signOut.');
  }
}


// Script entry point
try
{
  checkCommandLineArguments(program);

  let authentication = Authentication({ ip: program.ip, port: Number(program.port) });

  // Function to handle asynchronous errors out of the try/catch scope
  function handleAsyncError(error)
  {
    console.error(error);
    process.exit(1);
  }

  // Process authentication command
  switch (program.command)
  {
  case 'signIn':
    authentication.signIn({ username: program.username, password: program.password }).then(
        () =>
        {
          console.log(authentication.getSessionToken());
        },
        (error) =>
        {
          handleAsyncError(error);
        });
    break;

  case 'signOut':
    authentication.setSessionToken(program.sessionToken);
    authentication.signOut().then(
        null,
        (error) =>
        {
          handleAsyncError(error);
        });
    break;
  }
}
catch (error)
{
  console.error(error);
  process.exit(1);
}
